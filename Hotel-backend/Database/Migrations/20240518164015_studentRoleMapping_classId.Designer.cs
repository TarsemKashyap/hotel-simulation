// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20240518164015_studentRoleMapping_classId")]
    partial class studentRoleMapping_classId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AppUserRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AppUserRefreshToken_UserId");

                    b.ToTable("AppUserRefreshToken", (string)null);
                });

            modelBuilder.Entity("AppUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Attribute", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AttributeName")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Attribute", (string)null);
                });

            modelBuilder.Entity("AttributeDecision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AccumulatedCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Attribute")
                        .HasColumnType("longtext");

                    b.Property<bool>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<decimal>("LaborBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<decimal>("NewCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperationBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuarterForecast")
                        .HasColumnType("int");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("AttributeDecision", (string)null);
                });

            modelBuilder.Entity("AttributeMaxCapitalOperationConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attribute")
                        .HasColumnType("longtext");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<decimal>("DepreciationYearly")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InitialCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LaborPortion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxNewCapital")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MaxOperation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NewCapitalPortion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OperationPortion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PreCapitalPercent")
                        .HasPrecision(5, 5)
                        .HasColumnType("decimal(5,5)");

                    b.Property<decimal>("PreLaborPercent")
                        .HasPrecision(8, 8)
                        .HasColumnType("decimal(8,8)");

                    b.HasKey("ID");

                    b.ToTable("AttributeMaxCapitalOperationConfig", (string)null);
                });

            modelBuilder.Entity("BalanceSheet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AcctReceivable")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Cash")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<decimal>("Inventories")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("LongDebt")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("LongDebtPay")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<decimal>("NetPrptyEquip")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<decimal>("RetainedEarn")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("ShortDebt")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("ShortDebtPay")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotAsset")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotCurrentAsset")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotCurrentLiab")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotLiab")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("BalanceSheet", (string)null);
                });

            modelBuilder.Entity("ClassGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Serial")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("IX_ClassGroup_ClassID");

                    b.ToTable("ClassGroup", (string)null);
                });

            modelBuilder.Entity("ClassSession", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentQuater")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("HotelsCount")
                        .HasColumnType("int");

                    b.Property<string>("Memo")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<int>("RoomInEachHotel")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("ClassId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("CustomerRawRating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attribute")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<decimal>("RawRating")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("CustomerRawRating", (string)null);
                });

            modelBuilder.Entity("Database.Domain.StudentClassMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isDefault")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClassMapping");
                });

            modelBuilder.Entity("Database.Domain.StudentGroupMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClassGroupGroupId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ClassGroupGroupId");

                    b.ToTable("StudentGroupMapping");
                });

            modelBuilder.Entity("Database.Domain.StudentRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("StudentRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "Revenue Manager"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "Retail and Operations Manager"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "F&B Manager"
                        },
                        new
                        {
                            Id = 4,
                            RoleName = "General Manager"
                        },
                        new
                        {
                            Id = 5,
                            RoleName = "Room Manager"
                        },
                        new
                        {
                            Id = 6,
                            RoleName = "Marketing Manager"
                        });
                });

            modelBuilder.Entity("Database.Domain.StudentSignupTemp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSignupComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentFailureReason")
                        .HasColumnType("longtext");

                    b.Property<int>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RawTransactionResponse")
                        .HasColumnType("longtext");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionId")
                        .HasColumnType("longtext");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("quantityleft")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StudentSignupTemp", (string)null);
                });

            modelBuilder.Entity("DistributionChannels", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("DistributionChannels", (string)null);
                });

            modelBuilder.Entity("DistributionChannelVSsegmentConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("DistributionChannel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Percentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("DistributionChannelVSsegmentConfig", (string)null);
                });

            modelBuilder.Entity("Goal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ADRM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ADRY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<decimal>("MgtEfficiencyM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MgtEfficiencyY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<decimal>("OccupancyM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OccupancyY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProfitMarginM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProfitMarginY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<decimal>("RevparM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RevparY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RoomRevenM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RoomRevenY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShareRevenM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShareRevenY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShareRoomM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ShareRoomY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRevenM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRevenY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YieldMgtM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YieldMgtY")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("Goal", (string)null);
                });

            modelBuilder.Entity("IdealRatingAttributeWeightConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<decimal>("IdealRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("IdealRatingAttributeWeightConfig", (string)null);
                });

            modelBuilder.Entity("IncomeState", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AjstNetIncom")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Food2B")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FoodB")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FoodB1")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FoodB2")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FoodB3")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FoodB4")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("FoodB5")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("GrossProfit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<decimal>("IncomBfCharg")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("IncomTAX")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Insurance")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Interest")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("MgtFee")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<decimal>("NetIncom")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("NetIncomBfTAX")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other1")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other2")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other3")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other4")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other5")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other6")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Other7")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("PropDepreciationerty")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Property")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Rent")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Replace")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Room")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Room1")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotCharg")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotDeptIncom")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotExpen")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("TotReven")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UndisExpens1")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UndisExpens2")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UndisExpens3")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UndisExpens4")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UndisExpens5")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("UndisExpens6")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("IncomeState", (string)null);
                });

            modelBuilder.Entity("MarketingDecision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActualDemand")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<decimal>("LaborSpending")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MarketingTechniques")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Spending")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("MarketingDecision", (string)null);
                });

            modelBuilder.Entity("MarketingTechniques", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Techniques")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("MarketingTechniques", (string)null);
                });

            modelBuilder.Entity("MarketingVSsegmentConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<decimal>("LaborPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MarketingTechniques")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Percentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("MarketingVSsegmentConfig", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MigrationScript", b =>
                {
                    b.Property<string>("ScriptId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("ExecutedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2023, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.HasKey("ScriptId");

                    b.ToTable("__MigrationScript", (string)null);
                });

            modelBuilder.Entity("Month", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMarket")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MonthId");

                    b.HasIndex("ClassId")
                        .HasDatabaseName("IX_ClassGroup_ClassID");

                    b.ToTable("ClassMonth", (string)null);
                });

            modelBuilder.Entity("PriceDecision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("ActualDemand")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("DistributionChannel")
                        .HasColumnType("longtext");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<bool>("Weekday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("PriceDecision", (string)null);
                });

            modelBuilder.Entity("PriceMarketingAttributeSegmentConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<string>("PMA")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Percentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("PriceMarketingAttributeSegmentConfig", (string)null);
                });

            modelBuilder.Entity("Rankings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Indicator")
                        .HasColumnType("longtext");

                    b.Property<string>("Institution")
                        .HasColumnType("longtext");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<decimal>("Performance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TeamName")
                        .HasColumnType("longtext");

                    b.Property<int>("TeamNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Rankings", (string)null);
                });

            modelBuilder.Entity("RoomAllocation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActualDemand")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("QuarterForecast")
                        .HasColumnType("int");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomsAllocated")
                        .HasColumnType("int");

                    b.Property<int>("RoomsSold")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<bool>("Weekday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("RoomAllocation", (string)null);
                });

            modelBuilder.Entity("Segment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MaxRating")
                        .HasColumnType("int");

                    b.Property<string>("SegmentName")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("ID");

                    b.ToTable("Segment", (string)null);
                });

            modelBuilder.Entity("SegmentConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Segment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.ToTable("SegmentConfig", (string)null);
                });

            modelBuilder.Entity("SoldRoomByChannel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<int>("SoldRoom")
                        .HasColumnType("int");

                    b.Property<bool>("Weekday")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("SoldRoomByChannel", (string)null);
                });

            modelBuilder.Entity("StudentRoleMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_StudentRoleMapping_RoleId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentRoleMapping", (string)null);
                });

            modelBuilder.Entity("WeekdayVSsegmentConfig", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConfigID")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceExpectation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.Property<bool>("WeekDay")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.ToTable("WeekdayVSsegmentConfig", (string)null);
                });

            modelBuilder.Entity("WeightedAttributeRating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ActualDemand")
                        .HasColumnType("int");

                    b.Property<decimal>("CustomerRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GroupID")
                        .HasColumnType("int");

                    b.Property<int>("MonthID")
                        .HasColumnType("int");

                    b.Property<int>("QuarterNo")
                        .HasColumnType("int");

                    b.Property<string>("Segment")
                        .HasColumnType("longtext");

                    b.HasKey("ID");

                    b.HasIndex("MonthID");

                    b.ToTable("WeightedAttributeRating", (string)null);
                });

            modelBuilder.Entity("Instructor", b =>
                {
                    b.HasBaseType("AppUser");

                    b.Property<string>("Institute")
                        .HasColumnType("longtext");

                    b.ToTable("Instructor", (string)null);
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasBaseType("AppUser");

                    b.Property<string>("Institue")
                        .HasColumnType("longtext");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("AppUserRefreshToken", b =>
                {
                    b.HasOne("AppUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttributeDecision", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("AttributeDecision")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("BalanceSheet", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("BalanceSheet")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("ClassGroup", b =>
                {
                    b.HasOne("ClassSession", "Class")
                        .WithMany("Groups")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CustomerRawRating", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("CustomerRawRating")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Database.Domain.StudentClassMapping", b =>
                {
                    b.HasOne("ClassSession", "Class")
                        .WithMany("StudentClassMappings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassGroup", "ClassGroup")
                        .WithMany("StudentClassMappings")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Student", "Student")
                        .WithMany("StudentClassMappings")
                        .HasForeignKey("StudentId");

                    b.Navigation("Class");

                    b.Navigation("ClassGroup");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Database.Domain.StudentGroupMapping", b =>
                {
                    b.HasOne("ClassGroup", null)
                        .WithMany("StudentGroupMapping")
                        .HasForeignKey("ClassGroupGroupId");
                });

            modelBuilder.Entity("Goal", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("Goal")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("IncomeState", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("IncomeState")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("MarketingDecision", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("MarketingDecision")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AppUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Month", b =>
                {
                    b.HasOne("ClassSession", "Class")
                        .WithMany("Months")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("PriceDecision", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("PriceDecision")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("RoomAllocation", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("RoomAllocation")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("SoldRoomByChannel", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("SoldRoomByChannel")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("StudentRoleMapping", b =>
                {
                    b.HasOne("ClassSession", "Class")
                        .WithMany("StudentRoleMappings")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Domain.StudentRoles", "StudentRoles")
                        .WithMany("StudentRoleMappings")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", "Student")
                        .WithMany("StudentRoleMapping")
                        .HasForeignKey("StudentId");

                    b.Navigation("Class");

                    b.Navigation("Student");

                    b.Navigation("StudentRoles");
                });

            modelBuilder.Entity("WeightedAttributeRating", b =>
                {
                    b.HasOne("Month", "Month")
                        .WithMany("WeightedAttributeRating")
                        .HasForeignKey("MonthID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("Instructor", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithOne()
                        .HasForeignKey("Instructor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.HasOne("AppUser", null)
                        .WithOne()
                        .HasForeignKey("Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUser", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ClassGroup", b =>
                {
                    b.Navigation("StudentClassMappings");

                    b.Navigation("StudentGroupMapping");
                });

            modelBuilder.Entity("ClassSession", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Months");

                    b.Navigation("StudentClassMappings");

                    b.Navigation("StudentRoleMappings");
                });

            modelBuilder.Entity("Database.Domain.StudentRoles", b =>
                {
                    b.Navigation("StudentRoleMappings");
                });

            modelBuilder.Entity("Month", b =>
                {
                    b.Navigation("AttributeDecision");

                    b.Navigation("BalanceSheet");

                    b.Navigation("CustomerRawRating");

                    b.Navigation("Goal");

                    b.Navigation("IncomeState");

                    b.Navigation("MarketingDecision");

                    b.Navigation("PriceDecision");

                    b.Navigation("RoomAllocation");

                    b.Navigation("SoldRoomByChannel");

                    b.Navigation("WeightedAttributeRating");
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Navigation("StudentClassMappings");

                    b.Navigation("StudentRoleMapping");
                });
#pragma warning restore 612, 618
        }
    }
}
